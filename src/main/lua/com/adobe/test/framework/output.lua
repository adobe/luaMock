---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by vdatcu.
--- DateTime: 19/10/2018 13:36
---

local testSuites = '<testsuites disabled="%s" errors="%s" failures="%s" name="" tests="%s" time="%s">\n'
local testSuite = '\t<testsuite name="%s" tests="%s" disabled="%s" errors="%s" failures="%s" id="%s" time="%s" timestamp="">\n'
local testCase = '\t\t<testcase name="%s" assertions="%s" classname="%s" status="" time="%s">\n'
local failureMessage = '\t\t\t<failure message="%s" type="failure">%s</failure>\n'
local errorMessage = '\t\t\t<error message="internal test error" type="error">%s</error>\n'
local skippedMessage = '\t\t\t<skipped/>\n'

local INTEGRATION_TESTS_RESULTS_HEADER = "---- INTEGRATION TESTS ----\n\n"
local ALL_SUITES_FORMAT = "\n\nTests: %s - Time: %s - Disabled: %s - Errors: %s - Failed: %s  \n\n"
local SUITE_FORMAT = "\n%s - Tests: %s - Time: %s \n\n"
local TEST_FORMAT = "\t[%s] - Time: %s - "
local FAILURE_FORMAT = "%s - Message: %s - Trace: %s\n"
local ERROR_FORMAT = "%s - %s\n"
local PASS_MESSAGE = "PASS\n"
local SKIP_MESSAGE = "SKIPPED\n"


local Output = {}

function Output:xml()

    local xmlOut = {}
    xmlOut = {}
    table.insert(xmlOut, '<?xml version="1.0" encoding="UTF-8"?>\n')
    table.insert(xmlOut, string.format(testSuites, tostring(mockaStats.noIgnored), tostring(mockaStats.noErrors),
            tostring(mockaStats.noNOK), tostring(mockaStats.no), tostring(mockaStats.time)))
    for i, suiteData in ipairs(mockaStats.suites) do
        table.insert(xmlOut, string.format(testSuite, suiteData.name, tostring(suiteData.no), tostring(suiteData.noIgnored),
                tostring(suiteData.noErrors), tostring(suiteData.noNOK), tostring(i - 1), tostring(suiteData.time)))
        for j, testData in ipairs(suiteData.tests) do
            table.insert(xmlOut, string.format(testCase, testData.name, tostring(testData.assertions), testData.className, tostring(testData.time)))
            if testData.failureMessage then
                table.insert(xmlOut, string.format(failureMessage, testData.failureMessage, testData.failureTrace))
            elseif testData.errorMessage then
                table.insert(xmlOut, string.format(errorMessage, testData.errorMessage))
            elseif testData.skipped then
                table.insert(xmlOut, skippedMessage)
            end
            table.insert(xmlOut, "\t\t</testcase>\n")
        end
        table.insert(xmlOut, "\t</testsuite>\n")
    end
    table.insert(xmlOut, "</testsuites>\n")
    local file, err = io.open("test-results.xml", "wb")
    if not err then
        for line, data in ipairs(xmlOut) do
            file:write(data)
        end
        file:close()
    end
    return xmlOut

end

function Output:list()
    local listOut = {}
    table.insert(listOut, INTEGRATION_TESTS_RESULTS_HEADER)
    local allSuitesMessages = string.format(ALL_SUITES_FORMAT, tostring(mockaStats.no), tostring(mockaStats.time), tostring(
            mockaStats.noIgnored), tostring(mockaStats.noErrors or 0), tostring(mockaStats.noNOK))

    for i, suite in ipairs(mockaStats.suites) do
        local suiteMessage = string.format(SUITE_FORMAT, tostring(suite.name), tostring(suite.no), tostring(suite.time))
        table.insert(listOut, suiteMessage)
        for j, test in ipairs(suite.tests) do
            local testMessageTail
            if test.failureMessage then
                testMessageTail = string.format(FAILURE_FORMAT, "FAIL", test.failureMessage, test.failureTrace)
            elseif test.errorMessage then
                testMessageTail = string.format(ERROR_FORMAT, "ERROR", test.errorMessage)
            elseif test.skipped then
                testMessageTail = SKIP_MESSAGE
            else
                testMessageTail = PASS_MESSAGE
            end

            local testMessage = string.format(TEST_FORMAT, test.name, tostring(test.time)) .. testMessageTail

            table.insert(listOut, testMessage)
        end
    end
    table.insert(listOut, allSuitesMessages)

    return listOut
end

return Output